pipeline {
  agent any
  tools {
      jdk 'jdk8'
      maven 'mvn3'
  }
  
  stages {
  
      stage('test java installation') {
          steps {
              sh 'java -version'               
          }
      }
      stage('test maven installation') {
          steps {
              sh 'mvn -version'           
          }
      }
      
    stage('SonarQube analysis') {
         steps {
            dir("rest_api"){
                withSonarQubeEnv('mySonar') {
                    // Optionally use a Maven environment you've configured already
        			withMaven(maven:'mvn3') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
                script{
                        def sonarProps = readFile encoding: 'utf-8', file: 'target/sonar/report-task.txt'
	                    echo "sonarProps: " + sonarProps
	                    def ceTaskUrl = 'ceTaskUrl'
	                    sonarProps.split('\n').each { line ->
    	                    if (line.startsWith(ceTaskUrl)) {
    	                        env.SONAR_CE_TASK_URL = line.substring(ceTaskUrl.length() + 1)
    	                        echo "env.SONAR_CE_TASK_URL: " + env.SONAR_CE_TASK_URL  
    	                    }
	                           
                           if (line.startsWith('serverUrl')) {
                            	 def sonarServerUrl = line.split('=')[1]
                            	 if (!sonarServerUrl.endsWith('/')) {
                            	      sonarServerUrl += '/'
                            	 }
    
                                 env.SONAR_SERVER_URL = sonarServerUrl
                                 echo "env.SONAR_SERVER_URL: " + env.SONAR_SERVER_URL 
                            }
                        }
                    }
                }
            }
        }

    stage('Quality Gate') {
        steps {
        	dir('rest_api') {
                script {
                    sleep time: 3000, unit: 'MILLISECONDS'
                    timeout(time: 1, unit: 'MINUTES') {
                        waitUntil {
                            def jsonOutputFile = 'target/sonar/ceTask.json'
                            sh 'curl $SONAR_CE_TASK_URL -o ' + jsonOutputFile
                            def jsonOutputFileContents = readFile encoding: 'utf-8', file: jsonOutputFile
                            def ceTask = new groovy.json.JsonSlurper().parseText(jsonOutputFileContents)
                            env.SONAR_ANALYSIS_ID = ceTask['task']['analysisId']
                            return 'SUCCESS'.equals(ceTask['task']['status'])
                        }
                        def qualityGateUrl = env.SONAR_SERVER_URL + 'api/qualitygates/project_status?analysisId=' + env.SONAR_ANALYSIS_ID
                        echo "qualityGateUrl: " + qualityGateUrl
                        def qualityGateJsonFile = 'target/sonar/qualityGate.json'
                        sh 'curl ' + qualityGateUrl + ' -o ' + qualityGateJsonFile
                        def qualityGateJsonFileContents = readFile encoding: 'utf-8', file: qualityGateJsonFile
                        def qualityGateJson = new groovy.json.JsonSlurper().parseText(qualityGateJsonFileContents)
                        echo 'qualityGateJson: ' + qualityGateJson
                        if ("ERROR".equals(qualityGateJson['projectStatus']['status'])) {
                               error "Quality Gate Failure"
                        }
                        echo "Quality Gate Success"
                    }
                }
            }
        }
    }
    
    /* stage ("Delivery"){
        steps{
            dir('rest_api'){
                script{
                    def remote = [:]
                    remote.name = 'test'
                    remote.host = '192.168.160.67'
                    remote.user = 'tqs'
                    remote.password = 'veka.mele.77'
                    remote.allowAnyHosts = true
                    sshPut remote: remote, from: 'Dockerfile', into: '.'
                    sshCommand remote: remote, command: "docker stop rest_api"
                    sshCommand remote: remote, command: "docker rm rest_api"
                    sshCommand remote: remote, command: "docker rmi rest_api"
                    sshCommand remote: remote, command: "docker build -t rest_api ."
                    sshCommand remote: remote, command: "docker run -d -p 8081:8080 --env DB_USER=tqs19-105 --env DB_PASSWORD=grupotqs105 --name rest_api rest_api"
                }
            }
        }
    }
    
  }

  post {
  	success {
  		slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) - ${GIT_BRANCH}")
  	}
  	failure {
  		slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) - ${GIT_BRANCH}")
  	}
  }*/
  
}
